/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userInterface.DoctorWorkArea;

import Business.House.House;
import Business.Sensor.AirQualitySensor;
import Business.Sensor.Sensor;
import Business.Sensor.VitalSignsSensor;
import Business.Sensor.WasteManagementSensor;
import Business.Sensor.WaterQualitySensor;
import Business.SensorData.AirQualitySensorData;
import Business.SensorData.SensorData;
import Business.SensorData.SensorDataDirectory;
import Business.SensorData.WasteLevelSensorData;
import Business.SensorData.WaterQualitySensorData;
import java.awt.CardLayout;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.DefaultCategoryDataset;

/**
 *
 * @author puneeth
 */
public class ViewPatientHouseCondition extends javax.swing.JPanel {

    /**
     * Creates new form ViewPatientHouseCondition
     */
    private JPanel userProcessContainer;
    private House house;
    private String sensorsType;
    
    public ViewPatientHouseCondition(JPanel userProcessContainer, House house) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.house = house;
        populateSensorTable();
    }
    
    public void populateSensorTable() {
        DefaultTableModel model = (DefaultTableModel) sensorJTable.getModel();
        model.setRowCount(0);
        
        for (Sensor s : house.getSensorDirectory().getSensorList()) {
            if (!(s instanceof VitalSignsSensor)) {
                Object[] row = new Object[3];
                row[0] = s;
                row[1] = s.getName();
                row[2] = null;
                if (s instanceof AirQualitySensor) {
                    row[2] = Sensor.SensorType.Air.getValue();
                } else if (s instanceof WasteManagementSensor) {
                    row[2] = Sensor.SensorType.Waste.getValue();
                } else if (s instanceof WaterQualitySensor) {
                    row[2] = Sensor.SensorType.Water.getValue();
                } else if (s instanceof VitalSignsSensor) {
                    row[2] = Sensor.SensorType.VitalSigns.getValue();
                }
                model.addRow(row);
            }
        }
    }
    
    public void sensorType(Sensor s) {
        sensorsType = "";
        if (s instanceof AirQualitySensor) {
            sensorsType = Sensor.SensorType.Air.getValue();
        } else if (s instanceof WasteManagementSensor) {
            sensorsType = Sensor.SensorType.Waste.getValue();
        } else if (s instanceof WaterQualitySensor) {
            sensorsType = Sensor.SensorType.Water.getValue();
        } else if (s instanceof VitalSignsSensor) {
            sensorsType = Sensor.SensorType.VitalSigns.getValue();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        sensorJTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        sensorDataJTable = new javax.swing.JTable();

        setBackground(new java.awt.Color(255, 255, 255));

        sensorJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Sensor ID", "Sensor Name", "Sensor Type"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(sensorJTable);

        jLabel1.setText("House Sensor List:");

        jButton1.setText("Pull Data");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("<<Back");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        sensorDataJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Measured Values", "Status", "Recorded Date"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(sensorDataJTable);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(137, 137, 137)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 593, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 593, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(514, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(55, 55, 55)
                .addComponent(jLabel1)
                .addGap(29, 29, 29)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 364, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addGap(42, 42, 42)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 364, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(182, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        int selectedRow = sensorJTable.getSelectedRow();
        
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this,
                    "Please select a work request form the list!",
                    "Message!",
                    JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        Sensor s = (Sensor) sensorJTable.getValueAt(selectedRow, 0);
        sensorType(s);
        populateData(s.getSensorDataDirectory());
        //createDataset5(s.getSensorDataDirectory(),s.getUserAccount().getEmployee().getName());
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_jButton2ActionPerformed
    
    public void populateData(SensorDataDirectory sdd) {
        DefaultTableModel model = (DefaultTableModel) sensorDataJTable.getModel();
        model.setRowCount(0);
        for (SensorData sensorData : sdd.getSensorDataList()) {
            Object[] row = new Object[3];
            
            int value = 0;
            String status = "";
            if (sensorData instanceof WaterQualitySensorData) {
                value = ((WaterQualitySensorData) sensorData).getWaterQualityIndex();
                status = ((WaterQualitySensorData) sensorData).getLevelOfConcern();
            } else if (sensorData instanceof WasteLevelSensorData) {
                value = ((WasteLevelSensorData) sensorData).getWasteLevel();
                status = ((WasteLevelSensorData) sensorData).getLevelOfConcern();
            } else if (sensorData instanceof AirQualitySensorData) {
                value = ((AirQualitySensorData) sensorData).getAirQualityIndex();
                status = ((AirQualitySensorData) sensorData).getLevelOfHealthConcern();
            }
            row[0] = value;
            row[1] = status;
            row[2] = sensorData.getDataRecordedDate();
            
            model.addRow(row);
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable sensorDataJTable;
    private javax.swing.JTable sensorJTable;
    // End of variables declaration//GEN-END:variables
}
