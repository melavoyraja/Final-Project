/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userInterface.HouseholderWorkArea;

import Business.Enterprise.Enterprise;
import Business.Organization.Organization;
import Business.Organization.WasteManagementOrganization;
import Business.Sensor.Sensor;
import Business.SensorData.AirQualitySensorData;
import Business.SensorData.VitalSignsSensorData;
import Business.SensorData.WasteLevelSensorData;
import Business.SensorData.WaterQualitySensorData;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.AirQualityWorkRequest;
import Business.WorkQueue.DoctorWorkRequest;
import Business.WorkQueue.WasteManagementWorkRequest;
import Business.WorkQueue.WaterWorksWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author puneeth
 */
public class ManageRequestWorkArea extends javax.swing.JPanel {

    /**
     * Creates new form ManageRequestWorkArea
     */
    private JPanel userProcessContainer;
    private UserAccount account;
    private Enterprise enterprise;
    private Object[] comboList;
    private Organization organization;

    public ManageRequestWorkArea(JPanel userProcessContainer, UserAccount account, Enterprise enterprise, Organization organization) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.account = account;
        this.enterprise = enterprise;
        this.organization = organization;
        this.comboList = new Object[4];
        comboList[0] = "All";
        comboList[1] = "Pending";
        comboList[2] = "Approved";
        comboList[3] = "Rejected";

        populateRequest();
        loadRequestTable();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    public void populateRequest() {
        DefaultTableModel model = (DefaultTableModel) requestTable.getModel();
        model.setRowCount(0);

        for (WorkRequest wr : organization.getWorkQueue().getWorkRequestList()) {
            if (!(wr.getSensor() == null)) {
                Object[] row = new Object[6];
                row[0] = wr.getRequestDate();
                row[1] = wr.getResolveDate();
                row[2] = wr.getStatus();
                row[3] = null;
                row[4] = null;
                row[5] = wr.getResult();
                if (wr instanceof AirQualityWorkRequest) {
                    row[3] = ((AirQualitySensorData) wr.getSensorData()).getLevelOfHealthConcern();
                    row[4] = Sensor.SensorType.Air.toString();
                } else if (wr instanceof DoctorWorkRequest) {
                    row[3] = ((VitalSignsSensorData) wr.getSensorData()).getStatus();
                    row[4] = Sensor.SensorType.VitalSigns.toString();
                } else if (wr instanceof WasteManagementWorkRequest) {
                    row[3] = ((WasteLevelSensorData) wr.getSensorData()).getLevelOfConcern();
                    row[4] = Sensor.SensorType.Waste.toString();
                } else if (wr instanceof WaterWorksWorkRequest) {
                    row[3] = ((WaterQualitySensorData) wr.getSensorData()).getLevelOfConcern();
                    row[4] = Sensor.SensorType.Water.toString();
                }
                model.addRow(row);
            }

        }
    }

    public void loadRequestTable() {
        DefaultTableModel model = (DefaultTableModel) userrequestTable.getModel();
        model.setRowCount(0);
        for (WorkRequest wr : account.getWorkQueue().getWorkRequestList()) {

            Object[] row = new Object[5];
            row[0] = wr.getRequestDate();
            row[1] = wr.getResolveDate();
            row[2] = wr.getStatus();
            row[3] = null;
            row[4] = wr.getResult();
            if (wr instanceof WasteManagementWorkRequest) {

                row[3] = Organization.Type.WasteManagement.toString();
            } else if (wr instanceof WaterWorksWorkRequest) {

                row[3] = Organization.Type.WasteManagement.toString();
            }
            model.addRow(row);

        }
    }

    @SuppressWarnings("unchecked")


    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane3 = new javax.swing.JScrollPane();
        requestTable = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        userrequestTable = new javax.swing.JTable();

        setBackground(new java.awt.Color(255, 255, 255));

        requestTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Request Date", "Resolve Date", "Status", "Level of Concern", "Type", "Message"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(requestTable);
        if (requestTable.getColumnModel().getColumnCount() > 0) {
            requestTable.getColumnModel().getColumn(3).setHeaderValue("Level of Concern");
        }

        jLabel3.setText("Requests raised by sensors:");

        jButton4.setText("Raise New Request");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton6.setText("<<Back");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jLabel1.setText("Request raised by you:");

        userrequestTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Request Date", "Resolve Date", "Status", "Organization", "Message"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(userrequestTable);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(79, 79, 79)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 1030, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addComponent(jLabel3)
                            .addGap(159, 159, 159))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addComponent(jButton6)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton4))
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 1030, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(122, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(102, 102, 102)
                .addComponent(jLabel3)
                .addGap(22, 22, 22)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 305, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(41, 41, 41)
                .addComponent(jLabel1)
                .addGap(26, 26, 26)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 368, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(42, 42, 42)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton6)
                    .addComponent(jButton4))
                .addContainerGap(173, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        boolean check = false;
        boolean check1 = false;
        for(Organization o:enterprise.getOrganizationDirectory().getOrganizationList()){
            if(o instanceof WasteManagementOrganization){
                check = true;
            }
            if(o instanceof WasteManagementOrganization){
                check1 = true;
            }
        }
        if(check ==true && check1 == true){
        NewRequestJPanel newRequestJPanel = new NewRequestJPanel(userProcessContainer, account, enterprise, organization);
        userProcessContainer.add("newRequestJPanel", newRequestJPanel);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
        }else{
            JOptionPane.showMessageDialog(this,"Contact enterprise admin to create organizations!","Error!",JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButton4ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTable requestTable;
    private javax.swing.JTable userrequestTable;
    // End of variables declaration//GEN-END:variables
}
