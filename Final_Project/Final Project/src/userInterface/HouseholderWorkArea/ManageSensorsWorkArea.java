/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userInterface.HouseholderWorkArea;

import Business.City.City;
import Business.Enterprise.Enterprise;
import Business.Organization.AirQualityOrganization;
import Business.Organization.HouseholdOrganization;
import Business.Organization.Organization;
import Business.Organization.WasteManagementOrganization;
import Business.Organization.WaterWorksOrganization;
import Business.Sensor.AirQualitySensor;
import Business.Sensor.Sensor;
import Business.Sensor.SensorDirectory;
import Business.Sensor.VitalSignsSensor;
import Business.Sensor.WasteManagementSensor;
import Business.Sensor.WaterQualitySensor;
import Business.UserAccount.UserAccount;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import userInterface.SensorWorkArea.AirQualitySensorWorkArea;
import userInterface.SensorWorkArea.VitalSignSensorWorkArea;
import userInterface.SensorWorkArea.WasteManagementSensorWorkArea;
import userInterface.SensorWorkArea.WaterQualitySensorWorkArea;

/**
 *
 * @author puneeth
 */
public class ManageSensorsWorkArea extends javax.swing.JPanel {

    /**
     * Creates new form ManageSensorsWorkArea
     */
    private JPanel userProcessContainer;
    private UserAccount account;
    private SensorDirectory sensorDirectory;
    private Enterprise enterprise;
    private Organization organization;
    private City city;

    public ManageSensorsWorkArea(JPanel userProcessContainer, UserAccount account, Enterprise enterprise, Organization organization, City city) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.account = account;
        this.enterprise = enterprise;
        this.organization = organization;
        this.city = city;
        this.sensorDirectory = account.getEmployee().getHouse().getSensorDirectory();
        populateSensorTable();
    }

    public void populateSensorTable() {
        DefaultTableModel model = (DefaultTableModel) sensorJTable.getModel();
        model.setRowCount(0);

        for (Sensor s : sensorDirectory.getSensorList()) {
            Object[] row = new Object[3];
            row[0] = s;
            row[1] = s.getName();
            row[2] = null;
            if (s instanceof AirQualitySensor) {
                row[2] = Sensor.SensorType.Air.getValue();
            } else if (s instanceof WasteManagementSensor) {
                row[2] = Sensor.SensorType.Waste.getValue();
            } else if (s instanceof WaterQualitySensor) {
                row[2] = Sensor.SensorType.Water.getValue();
            } else if (s instanceof VitalSignsSensor) {
                row[2] = Sensor.SensorType.VitalSigns.getValue();
            }
            model.addRow(row);
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        sensorJTable = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));

        sensorJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Sensor ID", "Sensor Name", "Sensor Type"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(sensorJTable);

        jButton1.setText("Add Sensor");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("View Sensor Generated Data");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("<<Back");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(52, 52, 52)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton2)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jButton3)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton1))
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 630, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(50, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(43, 43, 43)
                .addComponent(jButton2)
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton3))
                .addContainerGap(110, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        AddSensorJPanel addSensorJPanel = new AddSensorJPanel(userProcessContainer, account, sensorDirectory);
        userProcessContainer.add("addSensorJPanel", addSensorJPanel);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
    }//GEN-LAST:event_jButton1ActionPerformed


    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        int selectedRow = sensorJTable.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Please select a sensor from table.", "Error", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        Sensor sensor = (Sensor) sensorJTable.getValueAt(selectedRow, 0);
        if (sensor instanceof AirQualitySensor) {
            AirQualityOrganization aqo = null;
            for (Organization o : enterprise.getOrganizationDirectory().getOrganizationList()) {
                if (o instanceof AirQualityOrganization) {
                    aqo = (AirQualityOrganization) o;
                }
            }
            if (aqo == null) {
                JOptionPane.showMessageDialog(this, "Request Admin to create organization!", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            AirQualitySensorWorkArea airQualitySensorWorkArea = new AirQualitySensorWorkArea(userProcessContainer, (AirQualitySensor) sensor, organization, aqo);
            userProcessContainer.add("airQualitySensorWorkArea", airQualitySensorWorkArea);
            CardLayout layout = (CardLayout) userProcessContainer.getLayout();
            layout.next(userProcessContainer);
        } else if (sensor instanceof WasteManagementSensor) {
            WasteManagementOrganization wmo = null;
            for (Organization o : enterprise.getOrganizationDirectory().getOrganizationList()) {
                if (o instanceof WasteManagementOrganization) {
                    wmo = (WasteManagementOrganization) o;
                }
            }
            if (wmo == null) {
                JOptionPane.showMessageDialog(this, "Request Admin to create organization!", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            WasteManagementSensorWorkArea wasteManagementSensorWorkArea = new WasteManagementSensorWorkArea(userProcessContainer, (WasteManagementSensor) sensor, organization, wmo);
            userProcessContainer.add("wasteManagementSensorWorkArea", wasteManagementSensorWorkArea);
            CardLayout layout = (CardLayout) userProcessContainer.getLayout();
            layout.next(userProcessContainer);

        } else if (sensor instanceof WaterQualitySensor) {
            WaterWorksOrganization wwo = null;
            for (Organization o : enterprise.getOrganizationDirectory().getOrganizationList()) {
                if (o instanceof WaterWorksOrganization) {
                    wwo = (WaterWorksOrganization) o;
                }
            }
            if (wwo == null) {
                JOptionPane.showMessageDialog(this, "Request Admin to create organization!", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            WaterQualitySensorWorkArea waterQualitySensorWorkArea = new WaterQualitySensorWorkArea(userProcessContainer, (WaterQualitySensor) sensor, organization, wwo);
            userProcessContainer.add("waterQualitySensorWorkArea", waterQualitySensorWorkArea);
            CardLayout layout = (CardLayout) userProcessContainer.getLayout();
            layout.next(userProcessContainer);
        } else if (sensor instanceof VitalSignsSensor) {
            HouseholdOrganization hho = null;
            for (Organization o : enterprise.getOrganizationDirectory().getOrganizationList()) {
                if (o instanceof HouseholdOrganization) {
                    hho = (HouseholdOrganization) o;
                }
            }
            if (hho == null) {
                JOptionPane.showMessageDialog(this, "Request Admin to create organization!", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            VitalSignSensorWorkArea vitalSignSensorWorkArea = new VitalSignSensorWorkArea(userProcessContainer, ((VitalSignsSensor) sensor), city, organization);
            userProcessContainer.add("vitalSignSensorWorkArea", vitalSignSensorWorkArea);
            CardLayout layout = (CardLayout) userProcessContainer.getLayout();
            layout.next(userProcessContainer);
        }


    }//GEN-LAST:event_jButton2ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable sensorJTable;
    // End of variables declaration//GEN-END:variables
}
